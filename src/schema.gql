# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
}

type Users {
  Users: [User!]!
}

type UserUpdateResult {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
}

type UserDeleteResult {
  deleteStatus: Boolean!
}

type LoginResponse {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
  jwt_token: String!
}

"""
페이지네이션 쿼리 후 이동한 기준점을 나타내는 객체입니다. 다음 페이지를 탐색하기 위해 해당 정보를 CursorInput으로 사용할 수 있습니다.
"""
type Cursor {
  time: String!
  id: String!
}

"""페이지네이션 결과를 표현하는 객체입니다. 주로 다음 페이지를 가져오기 위한 정보를 표현합니다."""
type PageInfo {
  """
  다음 페이지에 대한 항목이 추가로 존재하는지의 여부를 나타냅니다. 해당 값이 true라면, 쿼리 결과 항목을 한 페이지에 전부 담지 못했음을 의미합니다.
  """
  hasNext: Boolean!

  """
  쿼리한 페이지의 끝점을 나타냅니다. 정보 누락 없이 다음 페이지를 요청하려면, 해당 Cursor를 시작점으로 다음 페이지를 요청해야 합니다. 해당 값이 null이라면 페이지에 아무 정보도 없다는 뜻입니다.
  """
  cursor: Cursor
}

"""친구신청 관련 객체입니다."""
type FriendRequest {
  """친구신청 고유 id입니다."""
  _id: String!

  """친구신청을 요청한 User객체입니다."""
  requester: User!

  """친구신청을 받은 User객체입니다."""
  receiver: User!

  """친구신청 메세지입니다."""
  requestMessage: String!

  """친구신청이 생성된 시간입니다."""
  createdAt: String!
}

"""친구신청 목록 쿼리 결과를 나타내는 객체입니다. FriendRequest객체 배열과 페이지네이션 정보가 포함됩니다."""
type FriendRequestsQueryResult {
  friendRequests: [FriendRequest!]!
  pageInfo: PageInfo!
}

type CreateFriendRequestResult {
  """친구신청 고유 id입니다."""
  _id: String!

  """친구신청을 요청한 User객체입니다."""
  requester: User!

  """친구신청을 받은 User객체입니다."""
  receiver: User!

  """친구신청 메세지입니다."""
  requestMessage: String!

  """친구신청이 생성된 시간입니다."""
  createdAt: String!
  success: Boolean!
}

type DeleteFriendRequestResult {
  success: Boolean!
}

type AcceptFriendRequestResult {
  success: String!
}

"""친구를 나타내는 객체입니다."""
type Friend {
  """친구관계 자체를 나타내는 고유 id입니다."""
  _id: String!

  """친구에 대한 User객체를 나타냅니다."""
  user: User!

  """친구관계를 언제 형성했는지에 대한 시간을 나타냅니다."""
  createdAt: String!
}

"""친구 목록 쿼리 결과를 나타내는 객체입니다. Friend객체 배열과 페이지네이션 정보가 포함됩니다."""
type FriendsQueryResult {
  friends: [Friend!]!
  pageInfo: PageInfo!
}

type Post {
  _id: String!
  author: User!
  content: String!
  tags: String
  category: String!
  createdAt: String!
}

type PostsQueryResult {
  posts: [Post!]!
  pageInfo: PageInfo!
}

type CreatePostResult {
  post: Post!
  success: Boolean!
}

type DeletePostResult {
  success: Boolean!
}

type addAllUserInFriendResult {
  success: Boolean!
}

"""댓글의 주요 정보를 포함하는 객체입니다."""
type Comment {
  """댓글의 고유 id입니다."""
  _id: String!

  """댓글의 내용입니다."""
  content: String!

  """댓글이 속한 게시글의 고유 id입니다."""
  postId: String!

  """댓글의 작성자 User 객체입니다."""
  commenter: User!

  """댓글을 작성한 시간입니다."""
  createdAt: String!
}

"""여러개의 댓글을 배열로 가지고 있는 객체입니다. 페이지네이션 정보가 포함되어있습니다."""
type CommentsQueryResult {
  comments: [Comment!]!
  pageInfo: PageInfo!
}

"""댓글이 삭제되었는지에 대한 결과입니다."""
type deleteCommentResult {
  success: Boolean!
}

type UserInfos {
  users: [UserInfo!]!
}

type UserInfo {
  user: User!
  isFriend: FriendState!
  isFriendRequested: Boolean!
  friendCount: Int!
}

enum FriendState {
  FRIEND
  ME
  STRANGER
}

type AboutMe {
  user: User!
  isFriend: FriendState!
  isFriendRequested: Boolean!
  friendCount: Int!
  receivedFriendRequestCount: Int!
}

type Query {
  userByAccountId(account_id: String!): User!
  userById(id: String!): User!
  userWhoAmI: User!
  users(search: String!): Users!
  login(username: String!, password: String!): LoginResponse!

  """로그인한 유저가 보낸 친구신청 목록을 가져오는 쿼리"""
  sentFriendRequests(
    """페이지네이션 정보"""
    pagination: PaginationInput!
  ): FriendRequestsQueryResult!

  """로그인한 유저가 받은 친구신청 목록을 가져오는 쿼리입니다."""
  receivedFriendRequests(
    """페이지네이션 정보"""
    pagination: PaginationInput!
  ): FriendRequestsQueryResult!

  """친구 목록을 가져오는 쿼리입니다."""
  friends(
    """페이지네이션 정보"""
    pagination: PaginationInput!

    """친구 목록을 가져올 대상의 user id. 해당 항목을 비우면 로그인한 유저의 id를 기준으로 친구 목록을 불러옵니다."""
    targetUserId: String
  ): FriendsQueryResult!
  post(postId: String!): Post!
  postsByUserId(targetUserId: String!, filter: PostFilter!, pagination: PaginationInput!): PostsQueryResult!
  postsForTimeline(filter: PostFilter!, pagination: PaginationInput!): PostsQueryResult!
  postsByMe(filter: PostFilter!, pagination: PaginationInput!): PostsQueryResult!

  """특정 글의 댓글을 가져오는 쿼리입니다."""
  comments(
    """댓글을 가져올 대상 글의 id"""
    postId: String!

    """페이지네이션 정보"""
    pagination: PaginationInput!
  ): CommentsQueryResult!
  userInfo(userId: String!): UserInfo!
  userInfos(search: String!): UserInfos!
  me: AboutMe!
  userInfoByAccountId(accountId: String!): UserInfo!
}

"""한 페이지를 가져오기 위해 필요한 입력 데이터입니다. 시작점, 끝점, 페이지 당 항목 갯수를 입력합니다."""
input PaginationInput {
  """
  페이지네이션 시작점을 나타냅니다. 해당 항목을 생략하면 쿼리를 요청한 시간을 시작점으로 정합니다. 입력한 id에 대한 결과는 포함하지 않습니다.
  """
  cursor: CursorInput

  """
  페이지네이션 끝점을 나타냅니다. 해당 항목을 생략하면 시작점으로 부터 제한 없이 결과를 가져옵니다. 입력한 id에 대한 결과는 포함하지 않습니다.
  """
  until: CursorInput

  """한 페이지에 포함할 객체의 갯수를 나타냅니다. 해당 항목을 생략하면 각각의 쿼리에 대한 기본값으로 limit를 정합니다."""
  limit: Int
}

"""페이지네이션 기준점을 나타내는 Input입니다. 시간과 ID 둘다 필요합니다."""
input CursorInput {
  time: String!
  id: String!
}

input PostFilter {
  category: String
}

type Mutation {
  updateUser(updateUserData: UserUpdate!): UserUpdateResult!
  createUser(createUserData: UserCreate!): User!
  deleteUser(deleteUserData: UserDeleteRequest!): UserDeleteResult!

  """로그인된 유저로부터 대상에게 친구신청을 생성하는 뮤테이션입니다."""
  createFriendRequest(
    """친구신청 대상 유저 id와 친구신청 메시지를 담는 Input객체"""
    createFriendRequestData: CreateFriendRequest!
  ): CreateFriendRequestResult!

  """
  지정된 friendRequestId에 대한 친구신청을 삭제하는 뮤테이션입니다. 로그인한 유저가 해당 친구신청을 보내지 않았다면 삭제할 수 없습니다.
  """
  deleteFriendRequest(
    """삭제할 친구신청 id"""
    friendRequestId: String!
  ): DeleteFriendRequestResult!

  """
  지정된 friendRequestId에 대한 친구신청을 승낙하는 뮤테이션입니다. 해당 뮤테이션이 처리되면 지정된 친구신청은 사라지며, 로그인된 유저와 친구신청을 받은 유저 서로 친구관계로 등록됩니다. 로그인된 유저가 받지 않은 친구신청은 승낙할 수 없습니다.
  """
  acceptFriendRequest(
    """승낙할 친구신청 id"""
    acceptFriendRequestData: String!
  ): AcceptFriendRequestResult!
  createPost(input: CreatePostInput!): CreatePostResult!
  deletePost(deletePostData: DeletePost!): DeletePostResult!
  addAllUserInFriend: addAllUserInFriendResult!

  """특정 글에 댓글을 작성하는 뮤테이션입니다."""
  addCommentToPost(
    """댓글을 작성할 대상 글의 id"""
    targetPostId: String!

    """댓글의 내용"""
    content: String!
  ): Comment!
  deleteCommentById(
    """삭제할 댓글의 id"""
    targetCommentId: String!
  ): deleteCommentResult!
}

input UserUpdate {
  name: String!
  about_me: String!
  password: String!
}

input UserCreate {
  name: String!
  account_id: String!
  email: String!
  password: String!
}

input UserDeleteRequest {
  deleteConfirm: Boolean!
}

"""친구신청을 생성하기 위해 필요한 Input 객체입니다."""
input CreateFriendRequest {
  """친구신청을 보낼 유저의 id입니다."""
  receiver: String!

  """친구신청 메세지 내용입니다."""
  requestMessage: String!
}

input CreatePostInput {
  content: String!
  tags: String
  category: String
}

input DeletePost {
  postId: String!
}
