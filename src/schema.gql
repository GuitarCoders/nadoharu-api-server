# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
}

type Users {
  Users: [User!]!
}

type UserUpdateResult {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
}

type UserDeleteResult {
  deleteStatus: Boolean!
}

type LoginResponse {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
  jwt_token: String!
}

type FriendRequest {
  _id: String!
  requester: User!
  receiver: User!
  requestMessage: String!
  createdAt: String!
}

type FriendRequestArray {
  friendRequests: [FriendRequest!]!
}

type CreateFriendRequestResult {
  _id: String!
  requester: User!
  receiver: User!
  requestMessage: String!
  createdAt: String!
  success: Boolean!
}

type DeleteFriendRequestResult {
  success: Boolean!
}

type AcceptFriendRequestResult {
  success: String!
}

type Cursor {
  time: String!
  id: String!
}

type PageInfo {
  hasNext: Boolean!
  cursor: Cursor
}

type Friend {
  _id: String!
  user: User!
  createdAt: String!
}

type FriendsQueryResult {
  friends: [Friend!]!
  pageInfo: PageInfo!
}

type Post {
  _id: String!
  author: User!
  content: String!
  tags: String
  category: String!
  createdAt: String!
}

type PostsQueryResult {
  posts: [Post!]!
  pageInfo: PageInfo!
}

type CreatePostResult {
  post: Post!
  success: Boolean!
}

type DeletePostResult {
  success: Boolean!
}

type addAllUserInFriendResult {
  success: Boolean!
}

"""댓글의 주요 정보를 포함하는 객체입니다."""
type Comment {
  """댓글의 고유 id입니다."""
  _id: String!

  """댓글의 내용입니다."""
  content: String!

  """댓글이 속한 게시글의 고유 id입니다."""
  postId: String!

  """댓글의 작성자 User 객체입니다."""
  commenter: User!

  """댓글을 작성한 시간입니다."""
  createdAt: String!
}

"""여러개의 댓글을 배열로 가지고 있는 객체입니다. 페이지네이션 정보가 포함되어있습니다."""
type Comments {
  comments: [Comment!]!
  pageInfo: PageInfo!
}

"""댓글이 삭제되었는지에 대한 결과입니다."""
type deleteCommentResult {
  success: Boolean!
}

type UserInfos {
  users: [UserInfo!]!
}

type UserInfo {
  user: User!
  isFriend: FriendState!
  isFriendRequested: Boolean!
  friendCount: Int!
}

enum FriendState {
  FRIEND
  ME
  STRANGER
}

type AboutMe {
  user: User!
  isFriend: FriendState!
  isFriendRequested: Boolean!
  friendCount: Int!
  receivedFriendRequestCount: Int!
}

type Query {
  userByAccountId(account_id: String!): User!
  userById(id: String!): User!
  userWhoAmI: User!
  users(search: String!): Users!
  login(username: String!, password: String!): LoginResponse!
  sentFriendRequests(pagination: PaginationInput!): FriendRequestArray!
  receivedFriendRequests(pagination: PaginationInput!): FriendRequestArray!
  friends(pagination: PaginationInput!, targetUserId: String): FriendsQueryResult!
  post(postId: String!): Post!
  postsByUserId(targetUserId: String!, filter: PostFilter!, pagination: PaginationInput!): PostsQueryResult!
  postsForTimeline(filter: PostFilter!, pagination: PaginationInput!): PostsQueryResult!
  postsByMe(filter: PostFilter!, pagination: PaginationInput!): PostsQueryResult!

  """특정 글의 댓글을 가져오는 쿼리입니다."""
  comments(
    """댓글을 가져올 대상 글의 id"""
    postId: String!

    """페이지네이션 정보"""
    pagination: PaginationInput!
  ): Comments!
  userInfo(userId: String!): UserInfo!
  userInfos(search: String!): UserInfos!
  me: AboutMe!
  userInfoByAccountId(accountId: String!): UserInfo!
}

input PaginationInput {
  cursor: CursorInput
  until: CursorInput
  limit: Int
}

input CursorInput {
  time: String!
  id: String!
}

input PostFilter {
  category: String
}

type Mutation {
  updateUser(updateUserData: UserUpdate!): UserUpdateResult!
  createUser(createUserData: UserCreate!): User!
  deleteUser(deleteUserData: UserDeleteRequest!): UserDeleteResult!
  createFriendRequest(createFriendRequestData: CreateFriendRequest!): CreateFriendRequestResult!
  deleteFriendRequest(deleteFriendRequestData: DeleteFriendRequest!): DeleteFriendRequestResult!
  acceptFriendRequest(acceptFriendRequestData: AcceptFriendRequest!): AcceptFriendRequestResult!
  createPost(input: CreatePostInput!): CreatePostResult!
  deletePost(deletePostData: DeletePost!): DeletePostResult!
  addAllUserInFriend: addAllUserInFriendResult!

  """특정 글에 댓글을 작성하는 뮤테이션입니다."""
  addCommentToPost(
    """댓글을 작성할 대상 글의 id"""
    targetPostId: String!

    """댓글의 내용"""
    content: String!
  ): Comment!
  deleteCommentById(
    """삭제할 댓글의 id"""
    targetCommentId: String!
  ): deleteCommentResult!
}

input UserUpdate {
  name: String!
  about_me: String!
  password: String!
}

input UserCreate {
  name: String!
  account_id: String!
  email: String!
  password: String!
}

input UserDeleteRequest {
  deleteConfirm: Boolean!
}

input CreateFriendRequest {
  receiver: String!
  requestMessage: String!
}

input DeleteFriendRequest {
  friendRequestId: String!
}

input AcceptFriendRequest {
  friendRequestId: String!
}

input CreatePostInput {
  content: String!
  tags: String
  category: String
}

input DeletePost {
  postId: String!
}
