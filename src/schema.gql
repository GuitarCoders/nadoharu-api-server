# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
}

type UserUpdateResult {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
}

type UserDeleteResult {
  deleteStatus: Boolean!
}

type LoginResponse {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
  jwt_token: String!
}

type FriendRequest {
  _id: String!
  requestUser: User!
  receiveUser: User!
  requestMessage: String!
  createdAt: String!
}

type FriendRequestArray {
  friendRequests: [FriendRequest!]!
}

type CreateFriendRequestResult {
  _id: String!
  requestUser: User!
  receiveUser: User!
  requestMessage: String!
  createdAt: String!
  success: Boolean!
}

type DeleteFriendRequestResult {
  success: Boolean!
}

type AcceptFriendRequestResult {
  success: String!
}

type Friend {
  _id: String!
  user: User!
  createdAt: String!
}

type Friends {
  friends: [Friend!]!
}

type Post {
  _id: String!
  author: User!
  content: String!
  tags: String
  category: String!
  createdAt: String!
}

type GetPostsResult {
  posts: [Post!]!
  lastDateTime: String!
  hasNext: Boolean!
}

type CreatePostResult {
  _id: String!
  author: User!
  content: String!
  tags: String
  category: String!
  createdAt: String!
  success: Boolean!
}

type DeletePostResult {
  success: Boolean!
}

type addAllUserInFriendResult {
  success: Boolean!
}

type Comment {
  _id: String!
  content: String!
  postId: String!
  Commenter: User!
  createdAt: String!
}

type Comments {
  comments: [Comment!]!
  hasNext: Boolean!
}

type deleteCommentResult {
  success: Boolean!
}

type Query {
  userByAccountId(account_id: String!): User!
  userById(id: String!): User!
  userWhoAmI: User!
  login(username: String!, password: String!): LoginResponse!
  getSentFriendRequests: FriendRequestArray!
  getReceiveFriendRequests: FriendRequestArray!
  getFriends(filter: getFriendsData!): Friends!
  getPost(postId: String!): Post!
  getPosts(getPostsData: GetPosts!): GetPostsResult!
  getCommentByPostId(postId: String!, filter: commentFilter!): Comments!
}

input getFriendsData {
  targetUserId: String
  limit: Int!
  skip: Int
}

input GetPosts {
  filter: getPostFilter
  count: Int!
}

input getPostFilter {
  userId: String
  category: String
  before: String
}

input commentFilter {
  skip: Int
  limit: Int!
}

type Mutation {
  updateUser(updateUserData: UserUpdate!): UserUpdateResult!
  createUser(createUserData: UserCreate!): User!
  deleteUser(deleteUserData: UserDeleteRequest!): UserDeleteResult!
  createFriendRequest(createFriendRequestData: CreateFriendRequest!): CreateFriendRequestResult!
  deleteFriendRequest(deleteFriendRequestData: DeleteFriendRequest!): DeleteFriendRequestResult!
  acceptFriendRequest(acceptFriendRequestData: AcceptFriendRequest!): AcceptFriendRequestResult!
  createPost(createPostData: CreatePost!): CreatePostResult!
  deletePost(deletePostData: DeletePost!): DeletePostResult!
  addAllUserInFriend: addAllUserInFriendResult!
  addCommentToPost(targetPostId: String!, content: String!): Comment!
  deleteCommentById(targetCommentId: String!): deleteCommentResult!
}

input UserUpdate {
  name: String!
  about_me: String!
  password: String!
}

input UserCreate {
  name: String!
  account_id: String!
  email: String!
  password: String!
}

input UserDeleteRequest {
  deleteConfirm: Boolean!
}

input CreateFriendRequest {
  receiveUserId: String!
  requestMessage: String!
}

input DeleteFriendRequest {
  friendRequestId: String!
}

input AcceptFriendRequest {
  friendRequestId: String!
}

input CreatePost {
  content: String!
  tags: String
  category: String
}

input DeletePost {
  postId: String!
}
