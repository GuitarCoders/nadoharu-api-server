# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
}

type Users {
  Users: [User!]!
}

type UserUpdateResult {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
}

type UserDeleteResult {
  deleteStatus: Boolean!
}

type LoginResponse {
  _id: String!
  name: String!
  email: String!
  account_id: String!
  about_me: String!
  status: String!
  jwt_token: String!
}

type FriendRequest {
  _id: String!
  requestUser: User!
  receiveUser: User!
  requestMessage: String!
  createdAt: String!
}

type FriendRequestArray {
  friendRequests: [FriendRequest!]!
}

type CreateFriendRequestResult {
  _id: String!
  requestUser: User!
  receiveUser: User!
  requestMessage: String!
  createdAt: String!
  success: Boolean!
}

type DeleteFriendRequestResult {
  success: Boolean!
}

type AcceptFriendRequestResult {
  success: String!
}

type Friend {
  _id: String!
  user: User!
  createdAt: String!
}

type Friends {
  friends: [Friend!]!
}

type PageTimeInfo {
  hasNext: Boolean!
  timeCursor: String!
  boundaryType: PageBoundaryType!
}

enum PageBoundaryType {
  LATEST
  OLDEST
}

type Post {
  _id: String!
  author: User!
  content: String!
  tags: String
  category: String!
  createdAt: String!
}

type PostsQueryResult {
  posts: [Post!]!
  pageInfo: PageTimeInfo!
}

type CreatePostResult {
  post: Post!
  success: Boolean!
}

type DeletePostResult {
  success: Boolean!
}

type addAllUserInFriendResult {
  success: Boolean!
}

type Comment {
  _id: String!
  content: String!
  postId: String!
  commenter: User!
  createdAt: String!
}

type Comments {
  comments: [Comment!]!
  pageInfo: PageTimeInfo!
}

type deleteCommentResult {
  success: Boolean!
}

type UserInfos {
  users: [UserInfo!]!
}

type UserInfo {
  user: User!
  isFriend: FriendState!
  isFriendRequested: Boolean!
  friendCount: Int!
}

enum FriendState {
  FRIEND
  ME
  STRANGER
}

type AboutMe {
  user: User!
  isFriend: FriendState!
  isFriendRequested: Boolean!
  friendCount: Int!
  receivedFriendRequestCount: Int!
}

type Query {
  userByAccountId(account_id: String!): User!
  userById(id: String!): User!
  userWhoAmI: User!
  users(search: String!): Users!
  login(username: String!, password: String!): LoginResponse!
  getSentFriendRequests: FriendRequestArray! @deprecated(reason: "쿼리 명명규칙이 변경됨에 따라 더이상 해당 쿼리는 사용하지 않습니다. sentFriendRequests 쿼리가 해당 쿼리를 완벽히 대체합니다.")
  sentFriendRequests: FriendRequestArray!
  getReceiveFriendRequests: FriendRequestArray! @deprecated(reason: "쿼리 이름에 오타가 있습니다. receivedFriendRequests가 해당 쿼리를 완벽히 대체합니다.")
  receivedFriendRequests: FriendRequestArray!
  friends(filter: FriendsFilter!): Friends!
  getFriends(filter: FriendsFilter!): Friends! @deprecated(reason: "쿼리 명명규칙이 변경됨에 따라 더이상 해당 쿼리는 사용하지 않습니다. friends 쿼리가 해당 쿼리를 완벽히 대체합니다.")
  post(postId: String!): Post!
  postsByUserId(targetUserId: String!, filter: PostFilter!, pagination: PaginationTimeInput!): PostsQueryResult!
  postsForTimeline(targetUserId: String, filter: PostFilter!, pagination: PaginationTimeInput!): PostsQueryResult!
  postsByMe(filter: PostFilter!, pagination: PaginationTimeInput!): PostsQueryResult!
  comments(postId: String!, pagination: PaginationTimeInput!): Comments!
  userInfo(userId: String!): UserInfo!
  userInfos(search: String!): UserInfos!
  me: AboutMe!
  userInfoByAccountId(accountId: String!): UserInfo!
}

input FriendsFilter {
  targetUserId: String
  limit: Int!
  skip: Int
}

input PostFilter {
  category: String
}

input PaginationTimeInput {
  timeCursor: String
  timeUntil: String
  limit: Int
}

type Mutation {
  updateUser(updateUserData: UserUpdate!): UserUpdateResult!
  createUser(createUserData: UserCreate!): User!
  deleteUser(deleteUserData: UserDeleteRequest!): UserDeleteResult!
  createFriendRequest(createFriendRequestData: CreateFriendRequest!): CreateFriendRequestResult!
  deleteFriendRequest(deleteFriendRequestData: DeleteFriendRequest!): DeleteFriendRequestResult!
  acceptFriendRequest(acceptFriendRequestData: AcceptFriendRequest!): AcceptFriendRequestResult!
  createPost(input: CreatePostInput!): CreatePostResult!
  deletePost(deletePostData: DeletePost!): DeletePostResult!
  addAllUserInFriend: addAllUserInFriendResult!
  addCommentToPost(targetPostId: String!, content: String!): Comment!
  deleteCommentById(targetCommentId: String!): deleteCommentResult!
}

input UserUpdate {
  name: String!
  about_me: String!
  password: String!
}

input UserCreate {
  name: String!
  account_id: String!
  email: String!
  password: String!
}

input UserDeleteRequest {
  deleteConfirm: Boolean!
}

input CreateFriendRequest {
  receiveUserId: String!
  requestMessage: String!
}

input DeleteFriendRequest {
  friendRequestId: String!
}

input AcceptFriendRequest {
  friendRequestId: String!
}

input CreatePostInput {
  content: String!
  tags: String
  category: String
}

input DeletePost {
  postId: String!
}
